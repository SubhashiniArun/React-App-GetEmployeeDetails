{"version":3,"sources":["logo.svg","EmployeeDetails.js","Employees.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeDetails","props","state","this","getEmployeeDetails","val","prevProps","id","axios","get","then","response","setState","employeeDetails","className","bsStyle","Heading","Title","componentClass","data","name","Body","email","phone","city","country","organization","jobProfile","additionalInfo","Component","Employees","selectedEmployee","getEmployeeData","employeeList","style","margin","map","employee","onClick","App","console","log","basename","process","src","logo","alt","exact","path","render","to","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cef2a730.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, {Component} from 'react';\r\nimport Panel from 'react-bootstrap/lib/Panel'\r\nimport axios from 'axios'\r\nimport { Right } from 'react-bootstrap/lib/Media';\r\n\r\n//This Component is a child Component of Customers Component\r\nexport default class EmployeeDetails extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {}\r\n  }\r\n\r\n  //Function which is called when the component loads for the first time\r\n  componentDidMount() {\r\n    this.getEmployeeDetails(this.props.val)\r\n  }\r\n\r\n  //Function which is called whenver the component is updated\r\n  componentDidUpdate(prevProps) {\r\n\r\n    //get Customer Details only if props has changed\r\n    if (this.props.val !== prevProps.val) {\r\n      this.getEmployeeDetails(this.props.val)\r\n    }\r\n  }\r\n\r\n  //Function to Load the customerdetails data from json.\r\n  getEmployeeDetails(id) {\r\n    axios.get('assets/json-response/employee' + id + '.json').then(response => {\r\n      this.setState({employeeDetails: response})\r\n    })\r\n  };\r\n\r\n  render() {\r\n    if (!this.state.employeeDetails)\r\n      return (<p>Loading Data</p>)\r\n    return (<div className=\"employeeDetails\">\r\n      <Panel bsStyle=\"info\" className=\"centeralign\" >\r\n        <Panel.Heading>\r\n          <Panel.Title componentClass=\"h3\">{this.state.employeeDetails.data.name}</Panel.Title>\r\n        </Panel.Heading>\r\n        <Panel.Body>\r\n          <p>Name : {this.state.employeeDetails.data.name}</p>\r\n          <p>Email : {this.state.employeeDetails.data.email}</p>\r\n          <p>Phone : {this.state.employeeDetails.data.phone}</p>\r\n          <p>City : {this.state.employeeDetails.data.city}</p>\r\n          <p>State : {this.state.employeeDetails.data.state}</p>\r\n          <p>Country : {this.state.employeeDetails.data.country}</p>\r\n          <p>Organization : {this.state.employeeDetails.data.organization}</p>\r\n          <p>Job Profile : {this.state.employeeDetails.data.jobProfile}</p>\r\n          <p>Additional Info : {this.state.employeeDetails.data.additionalInfo}</p>\r\n        </Panel.Body>\r\n      </Panel>\r\n    </div>)\r\n  }\r\n}","import React, {Component} from 'react';\r\nimport Panel from 'react-bootstrap/lib/Panel'\r\nimport Button from 'react-bootstrap/lib/Button'\r\nimport EmployeeDetails from './EmployeeDetails'\r\nimport axios from 'axios'\r\n\r\nexport default class Employees extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      selectedEmployee: 1\r\n    }\r\n  }\r\n\r\n  //function which is called the first time the component loads\r\n  componentDidMount() {\r\n    this.getEmployeeData();\r\n  }\r\n\r\n  //Function to get the Customer Data from json\r\n  getEmployeeData() {\r\n    axios.get('assets/json-response/employeeList.json').then(response => {\r\n      this.setState({employeeList: response})\r\n    })\r\n  };\r\n\r\n  render() {\r\n    if (!this.state.employeeList)\r\n      return (<p>Loading data</p>)\r\n    return (<div className=\"addmargin\" style={{\r\n      margin:\"20px\"\r\n    }}>\r\n      <div className=\"col-md-3\">\r\n        {\r\n\r\n          this.state.employeeList.data.map(employee => <Panel bsStyle=\"info\" key={employee.name} className=\"centeralign\">\r\n            <Panel.Heading>\r\n              <Panel.Title componentClass=\"h3\">{employee.name}</Panel.Title>\r\n            </Panel.Heading>\r\n            <Panel.Body>\r\n              <p>{employee.email}</p>\r\n              <p>{employee.phone}</p>\r\n              <Button bsStyle=\"info\" onClick={() => this.setState({selectedEmployee: employee.id})}>\r\n\r\n                Click to View Details\r\n\r\n              </Button>\r\n\r\n            </Panel.Body>\r\n          </Panel>)\r\n        }\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <EmployeeDetails val={this.state.selectedEmployee}/>\r\n      </div>\r\n    </div>)\r\n  }\r\n\r\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\nimport logo from './logo.svg';\nimport Employees from './Employees';\n\nimport './App.css';\n\nclass App extends Component{\n  render(){\n    console.log(\"host url\"+process.env.PUBLIC_URL);\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n        <header className=\"App-header\">  \n          <img src={logo} className=\"App-logo\" alt=\"logo\" />       \n          <h1 className=\"App-title\">React-App To Display Employee Details</h1>\n        </header>       \n\n        <Switch>\n          <Route exact path=\"/\" render={() => (\n            <Redirect to=\"/employeeList\"></Redirect>\n          )}>\n          </Route>\n\n          <Route exact path=\"/employeeList\" component={Employees}></Route>\n\n        </Switch>  \n      </div>\n      </Router>        \n    \n    );    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App></App>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}